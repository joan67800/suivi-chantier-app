// Ce script est √† usage unique pour d√©finir le premier administrateur.
// Il ne sera pas d√©ploy√©, juste ex√©cut√© localement.

// UID de l'utilisateur √† nommer administrateur
const uidToMakeAdmin = 'Gz2BmJ9EuvbSceZZ1jwap8HUgd82';

// Initialisation de l'Admin SDK de Firebase
const admin = require('firebase-admin');

// IMPORTANT: Vous devez avoir votre fichier de cl√©s de service.
// Allez dans Param√®tres du projet > Comptes de service > G√©n√©rer une nouvelle cl√© priv√©e.
// Renommez le fichier t√©l√©charg√© en "serviceAccountKey.json" et placez-le dans le dossier "functions".
const serviceAccount = require('./serviceAccountKey.json');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

// La fonction qui d√©finit le custom claim "admin"
async function setAdminClaim(uid) {
  if (!uid) {
    console.error("L'UID n'est pas d√©fini. Veuillez v√©rifier la variable 'uidToMakeAdmin'.");
    process.exit(1);
  }
  try {
    await admin.auth().setCustomUserClaims(uid, { admin: true });
    console.log(`\n‚úÖ Succ√®s ! L'utilisateur ${uid} est maintenant un administrateur.\n`);
    console.log("üëâ Vous pouvez maintenant supprimer ce script (setAdmin.js) et le fichier serviceAccountKey.json.");
    console.log("üëâ Pensez √† faire un rechargement forc√© (Ctrl+F5) de votre application avant de vous reconnecter.");
  } catch (error) {
    console.error('‚ùå Erreur lors de la d√©finition du statut admin :', error);
  }
  process.exit(0);
}

// Lancement du script
console.log(`Tentative de d√©finir l'utilisateur ${uidToMakeAdmin} comme admin...`);
setAdminClaim(uidToMakeAdmin);

